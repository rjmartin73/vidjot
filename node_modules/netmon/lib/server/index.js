/**!
 * server/index.js
 */


/* Require modules */
var 
	net = require('net'),
	childProcess = require('child_process'),
	QS = require('querystring');


/**
 * TCP Server to handle incoming client requests
 * @param {Number} port, the port on which server will listen
 *	for incoming connections
 */
var Server = function(port, host) {
	this.port = (typeof port === 'undefined' || port === null)
		? 7991
		: port;
	
	this.host = (typeof host == 'undefined' || host === null)
		? 'localhost'
		: host;
}

/* Module exports */
module.exports = Server;
/**
 * Starts the server on given port
 * @return None
 */
Server.prototype.serve = function() {
	var self = this;
	net.Server(function(clientSocket) {
		/* Handling socket data event */
		clientSocket.on('data', function(data) {
			/* Pass the data to handler with socket and data refrences */
			handleClientMessage(data.toString().trim(), clientSocket);
		});
	})
	.on('error', function(err) {
		switch(err.code) {
			case 'EADDRINUSE': 
				console.error('Error: Port %d is already in use', self.port);
				break;
			case 'EADDRNOTAVAIL':
				console.log('Error: Hostname(%s) is not valid', self.host);
				break;
		}
	})
	.listen(self.port, self.host, function() {
		console.log('Server started at %s:%d', self.host, self.port);
	})
}

/**
 * Handles the message received from client
 * @param {String} msg, the data received via socket
 * @param {Socket} socket, the client socket reference
 */
var handleClientMessage = function(msg, socket) {
	msg = QS.parse(msg);
	switch(msg.action) {
		case 'run':
			if (typeof msg.command === 'undefined' || msg.command === null) {
				socket.write('Missing argument `command`');
				socket.write('action=run&command=<command>&args=[args]');
				socket.end('\n');
			} else {
				runCommand(msg.command, msg.args, socket);
			}
			break;
		default: 
			socket.end('Incorrect request protocol');
			break;
	}
}

/**
 * Runs the given command with argument
 * 
 * @param {String} command, the executable to run
 * @param {String} args, the arguments to executable
 * @param {Socket} socket, the client socket reference

 * @api private
 */
var runCommand = function(command, args, socket) {
	args = (typeof args == 'undefined'||args == null)
    ? [] 
    : args.split(' ');

  console.log('[%s:%s] -- %s %s', socket.remoteAddress, socket.remotePort, command, args);
  var proc = childProcess.spawn(command, args)
    .on('exit', function (code) {
      setTimeout(function () {socket.end()}, 100);
    })
    .on('error', function (err) {
      console.log('Error: ', err.message);
      switch(err.code) {
        case 'ENOENT':
          socket.end('Invalid command `' + command + '`\n');
          break;
        default: socket.end(err.code);
      }
    });
 
  /**
   * Register event handlers
   */
  proc.stdout.on('data', function (data) {
    socket.write(data);
  });

  proc.stderr.on('data', function (data) {
    socket.write(data);
  });
}

